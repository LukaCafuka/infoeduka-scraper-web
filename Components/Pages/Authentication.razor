@using System.Diagnostics
@using Microsoft.AspNetCore.Http.HttpResults
@using Microsoft.AspNetCore.Identity.Data
@using Microsoft.AspNetCore.Mvc
@rendermode InteractiveServer
@inject IeAuthentication AuthService
@inject NavigationManager Navigation

<div class="bg-white rounded-lg border-gray-200 shadow-xl shadow-gray-400 dark:shadow-gray-900 dark:bg-slate-900 sm:w-1/2 w-auto p-6">
    <div class="">
        <h2 class="text-2xl text-center font-bold dark:text-white mb-4">Start scraping by entering your <span class="font-extrabold">Infoeduka credentials</span></h2>
    </div>
    <div class="flex flex-col gap-4 sm:p-12 px-0 justify-center items-center space-y-4 sm:flex-col sm:justify-center sm:space-y-0">
        <div class="relative grow basis- w-full">
            <input type="text" required="required" id="floating_filled" class="block pr-12 w-full text-sm text-gray-900 bg-transparent rounded-lg border-1 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" name="username" @bind="Username" placeholder=" "/>
            <label for="floating_filled" class="absolute text-sm text-gray-500 bg-white dark:bg-gray-900 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto start-1">Username</label>
        </div>

        <div class="relative grow basis-full w-full">
            <input required="required" id="floating_filled2" class="block pr-12 w-full text-sm text-gray-900 bg-transparent rounded-lg border-1 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" name="password" @bind="Password" @bind:event="oninput" type="password" placeholder=" "/>
            <label for="floating_filled2" class="absolute text-sm text-gray-500 bg-white dark:bg-gray-900 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto start-1">Password</label>
        </div>
        
        <button class="text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center " @onmouseover="setTooltip" disabled="@_isButtonDisabled" type="submit" @onclick="CreateAuth">Start!</button>
        @if (tooltipShow)
        {
            <div role="tooltip" class="absolute text-center z-10 bottom-0 inline-block px-2 py-1.5 text-sm font-medium text-white bg-gray-900 rounded shadow-sm tooltip dark:bg-gray-700">
                We <b>do not</b> store any sensitive data on our servers, such as <b>passwords or usernames.</b> <br/> If you are unsure about this, check out the <a href="#" class="font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline">source code.</a>
            </div>
        }


        <LoadingSpinner IsVisible="@isLoading" />
        
        <MessageBox isDisplayed="@showMessage" Message="@textMessage" Status="@statusMessage"></MessageBox>
        
    </div>
    
</div>

@code {
    // local variables to store input data from the authentication form
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
   
    public bool tooltipShow { get; set; }               //show tooltip about data storing
    bool _isButtonDisabled = false;                     //disable button to prevent spamming    
    public string LoginCookie = string.Empty;           //local login cookie variable

    private bool isLoading = false;                     //handle loading spinner logic
    
    private bool showMessage = false;                   //show error or success message on form
    private string textMessage = "Undefined";           //the text the message will display
    private byte statusMessage = 1;                    //the message type (0 - Success, 1 - Error, 2 - Warning) 

    //show tooltip for a few seconds before hiding it
    public async Task setTooltip()
    {
        tooltipShow = true;
        await Task.Delay(5000);
        tooltipShow = false;
    }

    // Inject the ILogger service
    [Inject] private ILogger<Authentication> Logger { get; set; } = default!;

    
    //main task that gets called when the user initiates the login procedure
    async Task CreateAuth()
    {
        Logger.LogInformation("Start button was clicked");
        isLoading = true;
        showMessage = false;
        
        _isButtonDisabled = true;
        StateHasChanged();
        
        //switch credentials and throw errors if incorrect 
        switch (AuthService.CheckCredentials(Username, Password))
        {
            case 0:
                Logger.LogInformation($"IEAuthentication object created successfully \n{AuthService}");

                LoginCookie = await AuthService.GetCookie();
                if (LoginCookie != null)
                {
                    isLoading = false;
                    textMessage = "Auth successful, redirecting...";
                    showMessage = true;
                    statusMessage = 0;
                    Logger.LogInformation($"Cookie is {LoginCookie}");
                    AuthService.LoginCookie = LoginCookie;
                    await Task.Delay(5000);
                    Navigation.NavigateTo("/fetch");
                }
                else
                {
                    isLoading = false;
                    textMessage = "Auth failed";
                    showMessage = true;
                    statusMessage = 1;
                }
                
                break;
            case 1:
                Logger.LogError("Username or password is missing!");
                isLoading = false;
                textMessage = "Username or password is missing!";
                showMessage = true;
                statusMessage = 1;
                break;
            case 2:
                Logger.LogError("Password must be at least 8 characters");
                isLoading = false;
                textMessage = "Password must be at least 8 characters";
                showMessage = true;
                statusMessage = 1;
                break;
        }

        StateHasChanged();
        
        //clear the inputs in the forms
        Username = string.Empty;
        Password = string.Empty;
        
        await Task.Delay(2000);
        

        isLoading = false;
        _isButtonDisabled = false;
        StateHasChanged();
    }

}